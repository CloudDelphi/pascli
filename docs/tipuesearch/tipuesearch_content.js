var tipuesearch = {"pages": [
     {"title": "introduction", "text": "     pascli is a library written for Free Pascal and aims to provide components that allow the rapid creation of command line applications.    It uses a Builder to allow the description of arguments, commands and options, performs the automatic validation of these parameters and also displays the appropriate syntax for using the application to the user.    This strategy allows the developer to focus on the implementation of commands and create an application with a simple code structure.    Features              Fluent interface api to build the command strucuture.    Built-in constraints to validate allowed commands, allowed options, not allowed options, and arguments.    Short options or long options using the method AddOption    Command usage out of the box, outputs command information for a given command or general usage of the tool.    Command version output procedure.    Command colors unit to produce colored output to the user.    Full unit tested.          Requirements      This library was developed using FPC 3.2.2, but it may work with older versions. Should work under Linux, MacOS and Windows.    License      pascli is free and open-source software licensed under the MIT License.  Overview", "tags": "", "url": "introduction.html"},
     {"title": "quickstart", "text": "     Create a project      Create a project named helloWorld using Lazarus or an editor of your preference.    Manual install      To install pascli is very easy, just clone the repository and add the library's &quot;(your install path)/pascli/src&quot; folder to the project's search path. This procedure will need to be done for each new project.    Boss install      Another option to install pascli is using the https://github.com/HashLoad/boss. If it is already installed, just type in the command line from the project folder:          boss init --quiet  boss install github.com/leandro-lprsoft/pascli        This commands will download the library inside a subfolder &quot;modules/pascli&quot; and add this new path to the search path of the project.    Why use boss? It manages project dependencies and allows you to update dependencies when needed. It allows you to quickly operate with a previous version of that dependency reducing compatibility risks with new versions. When a new version appears you can simply type from the command line in the project folder:          boss update        Edit the project      Open the project using Lazarus or an editor of your preference and replace all with the following code:          program helloWorld;    {$MODE DELPHI}{$H+}    uses    {$IFDEF UNIX}    cmem, cthreads,    {$ENDIF}    Command.Interfaces,    Command.App,    Command.Usage,    Command.Version;    var    Application: TCommandApp;    {$R *.res}    procedure HelloCommand(ABuilder: ICommandBuilder);  begin    WriteLn('Hello world!');  end;    begin    Application := TCommandApp.Create(nil);    Application.Title := 'a basic cli tool sample project';      Command.Usage.Registry(Application.CommandBuilder);    Command.Version.Registry(Application.CommandBuilder);      Application      .CommandBuilder        .AddCommand(          'hello',          'Show a hello world message.''Show a hello world message.'#13#10 +          'Ex: basic hello',          @HelloCommand,          [ccNoParameters]);      Application.Run;    Application.Free;  end.        Now compile it, open a terminal at the project source path and type the following:          ./helloWorld        You should see the following output:          helloWorld version 1.0.0    Usage: helloWorld [command]     a basic cli tool sample project    Commands:     help           Shows information about how to use this tool or about a specific command.                   Ex: helloWorld help    version        Shows the helloWorld version information                   Ex: helloWorld version    hello          Show a hello world message.'Show a hello world message.                   Ex: basic hello    Run 'helloWorld help COMMAND        Try the following command to see the output:          ./helloWorld help hello        This command shows how to use the &quot;hello&quot; command, if there were available options, they would be displayed. Now you may explore this small program, try to change HelloCommand procedure to output different text. Try the tutorial to see the use of advanced options or just explore the library reference to check what is available.  Quick start", "tags": "", "url": "quickstart.html"},
     {"title": "project", "text": "     This project was developed using Lazarus 2.2.2 and FPC 3.2.2. It may work on older versions, but it's not our team's target.    The project is also configured to work with vscode. It has configuration for build, tests and debug. However, some extensions detailed in the dependencies section below may be required.    Github repository      https://github.com/leandro-lprsoft/pascli.git    Development dependencies      There are no dependencies to work with this project in Lazarus. But to work in vscode the following dependencies are needed:            Lazbuild - needs to be in the path, so the build task should work.    Native debug - vscode extension that is configured in launh.json, you may choose one of your preference.    Omni Pascal - vscode extension to format object pascal code          Documentation dependencies           pasdoc - it´s a documentation tool for freepascal, it´s optional for build the project, but required to build documentation. Must be in the path.    build.ps1 - is a powershell script to run pasdoc and generate the documentation site, it must be called from the project root: &quot;docs/generate/build.ps1&quot;        About the project", "tags": "", "url": "project.html"},
     {"title": "Command.App", "text": "   ", "tags": "", "url": "Command.App.html"},
     {"title": "Command.App.TCommandApp", "text": "    Ex:          uses Command.Interfaces, Command.App, Command.Usage, Command.Version;    begin    Application := TCommandApp.Create(nil);    Application.Title := 'a basic cli tool sample project';      Command.Usage.Registry(Application.CommandBuilder);    Command.Version.Registry(Application.CommandBuilder);      Application.Run;    Application.Free;  end.       ", "tags": "", "url": "Command.App.TCommandApp.html"},
     {"title": "Command.App.TCommandApp.DoRun", "text": "    ", "tags": "", "url": "Command.App.TCommandApp.html#DoRun"},
     {"title": "Command.App.TCommandApp.Create", "text": "    ", "tags": "", "url": "Command.App.TCommandApp.html#Create"},
     {"title": "Command.App.TCommandApp.CommandBuilder", "text": "   ", "tags": "", "url": "Command.App.TCommandApp.html#CommandBuilder"},
     {"title": "Command.Builder", "text": "   ", "tags": "", "url": "Command.Builder.html"},
     {"title": "Command.Builder.TOption", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html"},
     {"title": "Command.Builder.TOption.New", "text": "               AFlag Short option, accepts only a single letter. Do not use leading dash. AName Long option, accepts words, do not use leading dashes or spaces ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AFlag Short option, accepts only a single letter. Do not use leading dash. AName Long option, accepts words, do not use leading dashes or spaces ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. ", "tags": "", "url": "Command.Builder.TOption.html#New"},
     {"title": "Command.Builder.TOption.Flag", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Flag"},
     {"title": "Command.Builder.TOption.Name", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Name"},
     {"title": "Command.Builder.TOption.Description", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#Description"},
     {"title": "Command.Builder.TOption.NotAllowedFlags", "text": "   ", "tags": "", "url": "Command.Builder.TOption.html#NotAllowedFlags"},
     {"title": "Command.Builder.TCommand", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html"},
     {"title": "Command.Builder.TCommand.Create", "text": "    ", "tags": "", "url": "Command.Builder.TCommand.html#Create"},
     {"title": "Command.Builder.TCommand.HasOptions", "text": "    ", "tags": "", "url": "Command.Builder.TCommand.html#HasOptions"},
     {"title": "Command.Builder.TCommand.AddOption", "text": "               AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. ", "tags": "", "url": "Command.Builder.TCommand.html#AddOption"},
     {"title": "Command.Builder.TCommand.New", "text": "               AName Command name as it will be used via command line ADescription Command description that will be displayed to the user ACallback Callback procedure that will be invoked if this command was selected AConstraints Constraints check to validate correct command usage by the user. AName Command name as it will be used via command line ADescription Command description that will be displayed to the user ACallback Callback procedure that will be invoked if this command was selected AConstraints Constraints check to validate correct command usage by the user. ", "tags": "", "url": "Command.Builder.TCommand.html#New"},
     {"title": "Command.Builder.TCommand.Name", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Name"},
     {"title": "Command.Builder.TCommand.Description", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Description"},
     {"title": "Command.Builder.TCommand.Callback", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Callback"},
     {"title": "Command.Builder.TCommand.Constraints", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Constraints"},
     {"title": "Command.Builder.TCommand.Option", "text": "   AIndex Desired option index position AIndex Desired option index position", "tags": "", "url": "Command.Builder.TCommand.html#Option"},
     {"title": "Command.Builder.TCommand.Options", "text": "   ", "tags": "", "url": "Command.Builder.TCommand.html#Options"},
     {"title": "Command.Builder.TArgument", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html"},
     {"title": "Command.Builder.TArgument.New", "text": "       ADescription Argument description that will be displayed to the user AConstraint Constraints check to validate correct argument usage by the user. ADescription Argument description that will be displayed to the user AConstraint Constraints check to validate correct argument usage by the user. ", "tags": "", "url": "Command.Builder.TArgument.html#New"},
     {"title": "Command.Builder.TArgument.Description", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html#Description"},
     {"title": "Command.Builder.TArgument.Constraint", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html#Constraint"},
     {"title": "Command.Builder.TArgument.Value", "text": "   ", "tags": "", "url": "Command.Builder.TArgument.html#Value"},
     {"title": "Command.Builder.TCommandBuilder", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html"},
     {"title": "Command.Builder.TCommandBuilder.Create", "text": "   AExeName Program name without extension. It´s automatically provided by TCommandApp during the initialization. AExeName Program name without extension. It´s automatically provided by TCommandApp during the initialization. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Create"},
     {"title": "Command.Builder.TCommandBuilder.AddCommand", "text": "               ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. Ex: [ccDefault, ccNoArgumentsButCommands] ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. Ex: [ccDefault, ccNoArgumentsButCommands] ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#AddCommand"},
     {"title": "Command.Builder.TCommandBuilder.AddArgument", "text": "       ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#AddArgument"},
     {"title": "Command.Builder.TCommandBuilder.AddOption", "text": "               AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#AddOption"},
     {"title": "Command.Builder.TCommandBuilder.Parse", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Parse"},
     {"title": "Command.Builder.TCommandBuilder.Validate", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Validate"},
     {"title": "Command.Builder.TCommandBuilder.Execute", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Execute"},
     {"title": "Command.Builder.TCommandBuilder.CommandSelected", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CommandSelected"},
     {"title": "Command.Builder.TCommandBuilder.SetCommandSelected", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#SetCommandSelected"},
     {"title": "Command.Builder.TCommandBuilder.CommandAsArgument", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CommandAsArgument"},
     {"title": "Command.Builder.TCommandBuilder.SetCommandAsArgument", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#SetCommandAsArgument"},
     {"title": "Command.Builder.TCommandBuilder.GetCommandsFound", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetCommandsFound"},
     {"title": "Command.Builder.TCommandBuilder.GetDefaultCommand", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetDefaultCommand"},
     {"title": "Command.Builder.TCommandBuilder.CheckOption", "text": "   AOption Can be provided short option or long option without leading dashes. AOption Can be provided short option or long option without leading dashes. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#CheckOption"},
     {"title": "Command.Builder.TCommandBuilder.GetRawArguments", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetRawArguments"},
     {"title": "Command.Builder.TCommandBuilder.GetRawOptions", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#GetRawOptions"},
     {"title": "Command.Builder.TCommandBuilder.ExeName", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ExeName"},
     {"title": "Command.Builder.TCommandBuilder.HasCommands", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#HasCommands"},
     {"title": "Command.Builder.TCommandBuilder.HasArguments", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#HasArguments"},
     {"title": "Command.Builder.TCommandBuilder.HasOptions", "text": "    ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#HasOptions"},
     {"title": "Command.Builder.TCommandBuilder.UseArguments", "text": "   AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#UseArguments"},
     {"title": "Command.Builder.TCommandBuilder.Commands", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Commands"},
     {"title": "Command.Builder.TCommandBuilder.Arguments", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Arguments"},
     {"title": "Command.Builder.TCommandBuilder.ParsedOptions", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ParsedOptions"},
     {"title": "Command.Builder.TCommandBuilder.ParsedArguments", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ParsedArguments"},
     {"title": "Command.Builder.TCommandBuilder.InputLn", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#InputLn"},
     {"title": "Command.Builder.TCommandBuilder.Output", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Output"},
     {"title": "Command.Builder.TCommandBuilder.OutputColor", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#OutputColor"},
     {"title": "Command.Builder.TCommandBuilder.ColorTheme", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#ColorTheme"},
     {"title": "Command.Builder.TCommandBuilder.Title", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#Title"},
     {"title": "Command.Builder.TCommandBuilder.UseShortDescriptions", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#UseShortDescriptions"},
     {"title": "Command.Builder.TCommandBuilder.State", "text": "   ", "tags": "", "url": "Command.Builder.TCommandBuilder.html#State"},
     {"title": "Command.Builder.StandardConsoleInputLn", "text": "    ", "tags": "", "url": "Command.Builder.html#StandardConsoleInputLn"},
     {"title": "Command.Builder.StandardConsoleOutput", "text": "    ", "tags": "", "url": "Command.Builder.html#StandardConsoleOutput"},
     {"title": "Command.Builder.ColorConsoleOutput", "text": "    ", "tags": "", "url": "Command.Builder.html#ColorConsoleOutput"},
     {"title": "Command.Colors", "text": "    To use it, just add it to the program's uses clause, choose a theme from LightColorTheme or DarkColorTheme, you can also define your own theme using the record TColorTheme and assigning it to the TCommandBuilder.ColorTheme. See the example:          Application.CommandBuilder.ColorTheme := DarkColorTheme;  Application.CommandBuilder.OutputColor('Hello world', Application.CommandBuilder.Title);        See TCommandBuilder.OutputColor on how to use it. Color constants can be used directly as parameters for functions, in the example above we only used the theme for convention purposes. Library commands like UsageCommand, VersionCommand are directly affected by the chosen theme.    NoteThis unit has an intilization section that tries to figure out the console color before any color change. This color will be restored before application terminates via the code in finalzation section.   ", "tags": "", "url": "Command.Colors.html"},
     {"title": "Command.Colors.Black", "text": "   ", "tags": "", "url": "Command.Colors.html#Black"},
     {"title": "Command.Colors.Blue", "text": "   ", "tags": "", "url": "Command.Colors.html#Blue"},
     {"title": "Command.Colors.Green", "text": "   ", "tags": "", "url": "Command.Colors.html#Green"},
     {"title": "Command.Colors.Cyan", "text": "   ", "tags": "", "url": "Command.Colors.html#Cyan"},
     {"title": "Command.Colors.Red", "text": "   ", "tags": "", "url": "Command.Colors.html#Red"},
     {"title": "Command.Colors.Magenta", "text": "   ", "tags": "", "url": "Command.Colors.html#Magenta"},
     {"title": "Command.Colors.Brown", "text": "   ", "tags": "", "url": "Command.Colors.html#Brown"},
     {"title": "Command.Colors.LightGray", "text": "   ", "tags": "", "url": "Command.Colors.html#LightGray"},
     {"title": "Command.Colors.DarkGray", "text": "   ", "tags": "", "url": "Command.Colors.html#DarkGray"},
     {"title": "Command.Colors.LightBlue", "text": "   ", "tags": "", "url": "Command.Colors.html#LightBlue"},
     {"title": "Command.Colors.LightGreen", "text": "   ", "tags": "", "url": "Command.Colors.html#LightGreen"},
     {"title": "Command.Colors.LightCyan", "text": "   ", "tags": "", "url": "Command.Colors.html#LightCyan"},
     {"title": "Command.Colors.LightRed", "text": "   ", "tags": "", "url": "Command.Colors.html#LightRed"},
     {"title": "Command.Colors.LightMagenta", "text": "   ", "tags": "", "url": "Command.Colors.html#LightMagenta"},
     {"title": "Command.Colors.Yellow", "text": "   ", "tags": "", "url": "Command.Colors.html#Yellow"},
     {"title": "Command.Colors.White", "text": "   ", "tags": "", "url": "Command.Colors.html#White"},
     {"title": "Command.Colors.ChangeConsoleColor", "text": " Ex: change text output color to LightGreen color constant:    ChangeConsoleColor(LightGreen);    ", "tags": "", "url": "Command.Colors.html#ChangeConsoleColor"},
     {"title": "Command.Colors.OutputPalleteColor", "text": "    ", "tags": "", "url": "Command.Colors.html#OutputPalleteColor"},
     {"title": "Command.Colors.StartupColor", "text": "   ", "tags": "", "url": "Command.Colors.html#StartupColor"},
     {"title": "Command.Colors.StartColorTheme", "text": "   ", "tags": "", "url": "Command.Colors.html#StartColorTheme"},
     {"title": "Command.Colors.LightColorTheme", "text": "   ", "tags": "", "url": "Command.Colors.html#LightColorTheme"},
     {"title": "Command.Colors.DarkColorTheme", "text": "   ", "tags": "", "url": "Command.Colors.html#DarkColorTheme"},
     {"title": "Command.Helpers", "text": "   ", "tags": "", "url": "Command.Helpers.html"},
     {"title": "Command.Helpers.AppendToArray", "text": "       AArray Variable of type TArray&lt;string&gt; to which an item will be added. AText String to be added to the array. AArray Variable of type TArray&lt;string&gt; to which an item will be added. AText String to be added to the array. ", "tags": "", "url": "Command.Helpers.html#AppendToArray"},
     {"title": "Command.Helpers.RemoveStartingDashes", "text": "   LOption String option passed as an argument via the command line that will be processed to remove the leading &quot;-&quot;. LOption String option passed as an argument via the command line that will be processed to remove the leading &quot;-&quot;. ", "tags": "", "url": "Command.Helpers.html#RemoveStartingDashes"},
     {"title": "Command.Interfaces", "text": "   ", "tags": "", "url": "Command.Interfaces.html"},
     {"title": "Command.Interfaces.TColorTheme", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html"},
     {"title": "Command.Interfaces.TColorTheme.Title", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Title"},
     {"title": "Command.Interfaces.TColorTheme.Value", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Value"},
     {"title": "Command.Interfaces.TColorTheme.Text", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Text"},
     {"title": "Command.Interfaces.TColorTheme.Error", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Error"},
     {"title": "Command.Interfaces.TColorTheme.Other", "text": "   ", "tags": "", "url": "Command.Interfaces.TColorTheme.html#Other"},
     {"title": "Command.Interfaces.IOption", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html"},
     {"title": "Command.Interfaces.IOption.GetFlag", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetFlag"},
     {"title": "Command.Interfaces.IOption.SetFlag", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetFlag"},
     {"title": "Command.Interfaces.IOption.GetName", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetName"},
     {"title": "Command.Interfaces.IOption.SetName", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetName"},
     {"title": "Command.Interfaces.IOption.GetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetDescription"},
     {"title": "Command.Interfaces.IOption.SetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetDescription"},
     {"title": "Command.Interfaces.IOption.SetNotAllowedFlags", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#SetNotAllowedFlags"},
     {"title": "Command.Interfaces.IOption.GetNotAllowedFlags", "text": "    ", "tags": "", "url": "Command.Interfaces.IOption.html#GetNotAllowedFlags"},
     {"title": "Command.Interfaces.IOption.Flag", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Flag"},
     {"title": "Command.Interfaces.IOption.Name", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Name"},
     {"title": "Command.Interfaces.IOption.Description", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#Description"},
     {"title": "Command.Interfaces.IOption.NotAllowedFlags", "text": "   ", "tags": "", "url": "Command.Interfaces.IOption.html#NotAllowedFlags"},
     {"title": "Command.Interfaces.ICommand", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html"},
     {"title": "Command.Interfaces.ICommand.GetName", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetName"},
     {"title": "Command.Interfaces.ICommand.SetName", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetName"},
     {"title": "Command.Interfaces.ICommand.GetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetDescription"},
     {"title": "Command.Interfaces.ICommand.SetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetDescription"},
     {"title": "Command.Interfaces.ICommand.GetCallback", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetCallback"},
     {"title": "Command.Interfaces.ICommand.SetCallback", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetCallback"},
     {"title": "Command.Interfaces.ICommand.GetConstraints", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetConstraints"},
     {"title": "Command.Interfaces.ICommand.SetConstraints", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#SetConstraints"},
     {"title": "Command.Interfaces.ICommand.GetOption", "text": "   AIndex Desired option index position AIndex Desired option index position ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetOption"},
     {"title": "Command.Interfaces.ICommand.GetOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#GetOptions"},
     {"title": "Command.Interfaces.ICommand.HasOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommand.html#HasOptions"},
     {"title": "Command.Interfaces.ICommand.AddOption", "text": "               AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AFlag Represents the option as a single letter, i.e. a short option AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. Ex: no-build ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. ", "tags": "", "url": "Command.Interfaces.ICommand.html#AddOption"},
     {"title": "Command.Interfaces.ICommand.Name", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Name"},
     {"title": "Command.Interfaces.ICommand.Description", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Description"},
     {"title": "Command.Interfaces.ICommand.Callback", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Callback"},
     {"title": "Command.Interfaces.ICommand.Constraints", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Constraints"},
     {"title": "Command.Interfaces.ICommand.Option", "text": "   AIndex Desired option index position AIndex Desired option index position", "tags": "", "url": "Command.Interfaces.ICommand.html#Option"},
     {"title": "Command.Interfaces.ICommand.Options", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommand.html#Options"},
     {"title": "Command.Interfaces.IArgument", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html"},
     {"title": "Command.Interfaces.IArgument.GetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#GetDescription"},
     {"title": "Command.Interfaces.IArgument.SetDescription", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#SetDescription"},
     {"title": "Command.Interfaces.IArgument.GetConstraint", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#GetConstraint"},
     {"title": "Command.Interfaces.IArgument.SetConstraint", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#SetConstraint"},
     {"title": "Command.Interfaces.IArgument.GetValue", "text": "returns the value of argument provided via parameter, this value should assigned after parse    ", "tags": "", "url": "Command.Interfaces.IArgument.html#GetValue"},
     {"title": "Command.Interfaces.IArgument.SetValue", "text": "    ", "tags": "", "url": "Command.Interfaces.IArgument.html#SetValue"},
     {"title": "Command.Interfaces.IArgument.Description", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html#Description"},
     {"title": "Command.Interfaces.IArgument.Constraint", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html#Constraint"},
     {"title": "Command.Interfaces.IArgument.Value", "text": "   ", "tags": "", "url": "Command.Interfaces.IArgument.html#Value"},
     {"title": "Command.Interfaces.ICommandBuilder", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html"},
     {"title": "Command.Interfaces.ICommandBuilder.AddCommand", "text": "               ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. ACommand Command name as it will be provided by the user via command line parameter. ADescription Command description that will be displayed to the user as usage info. ACallback Callback procedure that will be invoked by the CommandBuilder if the validation was successful and the command informed match the command name. AConstraints Validation constraints for command usage, may set to default, may require a required argument, a required option. Check TCommandConstraint for existing constraints. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#AddCommand"},
     {"title": "Command.Interfaces.ICommandBuilder.GetCommands", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetCommands"},
     {"title": "Command.Interfaces.ICommandBuilder.GetCommandsFound", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetCommandsFound"},
     {"title": "Command.Interfaces.ICommandBuilder.GetDefaultCommand", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetDefaultCommand"},
     {"title": "Command.Interfaces.ICommandBuilder.AddArgument", "text": "       ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ADescription Description of the argument to inform the user of the correct usage info about it. AConstraint Constraints to check if the argument is optional or mandatory. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#AddArgument"},
     {"title": "Command.Interfaces.ICommandBuilder.GetArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.AddOption", "text": "               AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. AFlag Represents the option as a single letter, i.e. a short option. AName Represents the option as a word, that is, a long option, it does not accept spaces, but &quot;-' can be used for compound names. ADescription Description of the option that best defines your objective. It can be displayed to the user when the user requests information through the help command for example. ANotAllowedFlags Array of flags not supported for use in conjunction with this option. Only the short option without the &quot;-&quot; is accepted. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#AddOption"},
     {"title": "Command.Interfaces.ICommandBuilder.Parse", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Parse"},
     {"title": "Command.Interfaces.ICommandBuilder.Validate", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Validate"},
     {"title": "Command.Interfaces.ICommandBuilder.Execute", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Execute"},
     {"title": "Command.Interfaces.ICommandBuilder.CommandSelected", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CommandSelected"},
     {"title": "Command.Interfaces.ICommandBuilder.SetCommandSelected", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetCommandSelected"},
     {"title": "Command.Interfaces.ICommandBuilder.CommandAsArgument", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CommandAsArgument"},
     {"title": "Command.Interfaces.ICommandBuilder.SetCommandAsArgument", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetCommandAsArgument"},
     {"title": "Command.Interfaces.ICommandBuilder.GetParsedOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetParsedOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.CheckOption", "text": "   AOption Can be provided short option or long option without leading dashes. AOption Can be provided short option or long option without leading dashes. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#CheckOption"},
     {"title": "Command.Interfaces.ICommandBuilder.GetParsedArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetParsedArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.GetRawArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetRawArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.GetRawOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetRawOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.ExeName", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ExeName"},
     {"title": "Command.Interfaces.ICommandBuilder.HasCommands", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#HasCommands"},
     {"title": "Command.Interfaces.ICommandBuilder.HasArguments", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#HasArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.HasOptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#HasOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.GetInputLn", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetInputLn"},
     {"title": "Command.Interfaces.ICommandBuilder.SetInputLn", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetInputLn"},
     {"title": "Command.Interfaces.ICommandBuilder.GetOutput", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetOutput"},
     {"title": "Command.Interfaces.ICommandBuilder.SetOutput", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetOutput"},
     {"title": "Command.Interfaces.ICommandBuilder.GetOutputColor", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetOutputColor"},
     {"title": "Command.Interfaces.ICommandBuilder.SetOutputColor", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetOutputColor"},
     {"title": "Command.Interfaces.ICommandBuilder.UseArguments", "text": "   AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. AArguments Array of strings containing the arguments, the options must be passed with the leading dashes. ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#UseArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.GetColorTheme", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetColorTheme"},
     {"title": "Command.Interfaces.ICommandBuilder.SetColorTheme", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetColorTheme"},
     {"title": "Command.Interfaces.ICommandBuilder.GetTitle", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetTitle"},
     {"title": "Command.Interfaces.ICommandBuilder.SetTitle", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetTitle"},
     {"title": "Command.Interfaces.ICommandBuilder.GetUseShortDescriptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetUseShortDescriptions"},
     {"title": "Command.Interfaces.ICommandBuilder.SetUseShortDescriptions", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetUseShortDescriptions"},
     {"title": "Command.Interfaces.ICommandBuilder.GetState", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#GetState"},
     {"title": "Command.Interfaces.ICommandBuilder.SetState", "text": "    ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#SetState"},
     {"title": "Command.Interfaces.ICommandBuilder.Commands", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Commands"},
     {"title": "Command.Interfaces.ICommandBuilder.Arguments", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Arguments"},
     {"title": "Command.Interfaces.ICommandBuilder.ParsedOptions", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ParsedOptions"},
     {"title": "Command.Interfaces.ICommandBuilder.ParsedArguments", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ParsedArguments"},
     {"title": "Command.Interfaces.ICommandBuilder.InputLn", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#InputLn"},
     {"title": "Command.Interfaces.ICommandBuilder.Output", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Output"},
     {"title": "Command.Interfaces.ICommandBuilder.OutputColor", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#OutputColor"},
     {"title": "Command.Interfaces.ICommandBuilder.ColorTheme", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#ColorTheme"},
     {"title": "Command.Interfaces.ICommandBuilder.Title", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#Title"},
     {"title": "Command.Interfaces.ICommandBuilder.UseShortDescriptions", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#UseShortDescriptions"},
     {"title": "Command.Interfaces.ICommandBuilder.State", "text": "   ", "tags": "", "url": "Command.Interfaces.ICommandBuilder.html#State"},
     {"title": "Command.Interfaces.IValidatorContext", "text": "   ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html"},
     {"title": "Command.Interfaces.IValidatorContext.Add", "text": "    A valid instance of IValidatorBase responsible for processing a specific type of validation.)    ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html#Add"},
     {"title": "Command.Interfaces.IValidatorContext.HandleValidation", "text": "    ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html#HandleValidation"},
     {"title": "Command.Interfaces.IValidatorContext.Validate", "text": "    CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it.)    ", "tags": "", "url": "Command.Interfaces.IValidatorContext.html#Validate"},
     {"title": "Command.Interfaces.IValidatorBase", "text": "   ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html"},
     {"title": "Command.Interfaces.IValidatorBase.GetSucessor", "text": "    ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#GetSucessor"},
     {"title": "Command.Interfaces.IValidatorBase.SetSucessor", "text": "    ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#SetSucessor"},
     {"title": "Command.Interfaces.IValidatorBase.Validate", "text": "    CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it.)    ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#Validate"},
     {"title": "Command.Interfaces.IValidatorBase.Sucessor", "text": "   ", "tags": "", "url": "Command.Interfaces.IValidatorBase.html#Sucessor"},
     {"title": "Command.Interfaces.TCommandConstraint", "text": "    ccDefault  Indicates the default command that will be invoked by the CommandBuilder when a command is not informed through the command line by the user.    ccRequiresOneArgument  Indicates that the command requires at least one given argument to be used.    ccRequiresOneOption  Indicates that the command requires at least one option entered to be used.    ccNoArgumentsButCommands  Indicates that the command requires another command to function and does not accept arguments. A clear example of usage is the help command itself, which can provide instructions for using other commands.    ccNoParameters  Indicates that the command should be used without any parameters.   ", "tags": "", "url": "Command.Interfaces.html#TCommandConstraint"},
     {"title": "Command.Interfaces.TCommandConstraints", "text": "   ", "tags": "", "url": "Command.Interfaces.html#TCommandConstraints"},
     {"title": "Command.Interfaces.TArgumentConstraint", "text": "    acRequired  Indicates that the argument is required. Do not use it if one command doest not require any parameters.    acOptional  Indicates that the argument is optional.   ", "tags": "", "url": "Command.Interfaces.html#TArgumentConstraint"},
     {"title": "Command.Interfaces.TCommandCallback", "text": "   ABuilder Instance of CommandBuilder that processed, validated, and identified the callback command being called. ABuilder Instance of CommandBuilder that processed, validated, and identified the callback command being called. ", "tags": "", "url": "Command.Interfaces.html#TCommandCallback"},
     {"title": "Command.Interfaces.TOutputCallback", "text": "   AMessage Text that will be printed on output. AMessage Text that will be printed on output. ", "tags": "", "url": "Command.Interfaces.html#TOutputCallback"},
     {"title": "Command.Interfaces.TOutputColorCallback", "text": "       AMessage Text that will be printed on output. AColor Color that should be used to print the text. AMessage Text that will be printed on output. AColor Color that should be used to print the text. ", "tags": "", "url": "Command.Interfaces.html#TOutputColorCallback"},
     {"title": "Command.Interfaces.TInputLnCallback", "text": "    ", "tags": "", "url": "Command.Interfaces.html#TInputLnCallback"},
     {"title": "Command.Usage", "text": "   ", "tags": "", "url": "Command.Usage.html"},
     {"title": "Command.Usage.UsageCommand", "text": " If a given command needs another command as a parameter (for example help command).This command should be configured using ccNoArgumentsButCommands constraint allowing another command to be passed as parameter to UsageCommand.    To use this command, just add the Command.Usage to the uses clause:       uses Command.Usage;     And call Registry procedure to add this command to the builder: Ex:       Command.Usage.Registry(MyApp.CommandBuilder);     or customize your own configuration:       MyApp.CommandBuilder    .AddCommand(      'help',       'Shows information about how to use this tool or about a specific command.' + #13#10 +      'Ex: ' + ABuilder.ExeName + ' help',       @UsageCommand,      [ccDefault, ccNoArgumentsButCommands]);       ABuilder Instance of CommandBuilder from which the settings will be read to show usage information via the command line. ABuilder Instance of CommandBuilder from which the settings will be read to show usage information via the command line. ", "tags": "", "url": "Command.Usage.html#UsageCommand"},
     {"title": "Command.Usage.GetArgumentList", "text": "   ABuilder Instance of CommandBuilder from which data will be read. ABuilder Instance of CommandBuilder from which data will be read. ", "tags": "", "url": "Command.Usage.html#GetArgumentList"},
     {"title": "Command.Usage.WriteUsage", "text": "                   ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ATitle Application title ACommand Command name AOptions Options list AArgument Argument description ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ATitle Application title ACommand Command name AOptions Options list AArgument Argument description ", "tags": "", "url": "Command.Usage.html#WriteUsage"},
     {"title": "Command.Usage.WriteCommandUsage", "text": "   ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ", "tags": "", "url": "Command.Usage.html#WriteCommandUsage"},
     {"title": "Command.Usage.WriteGeneralUsage", "text": "   ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ABuilder Instance of CommandBuilder that will be used to output info through its configured callback procedure. ", "tags": "", "url": "Command.Usage.html#WriteGeneralUsage"},
     {"title": "Command.Usage.Registry", "text": " Ex:       Command.Usage.Registry(MyApp.CommandBuilder);       ABuilder CommandBuilder instance that will be used to register the UsageCommand. ABuilder CommandBuilder instance that will be used to register the UsageCommand. ", "tags": "", "url": "Command.Usage.html#Registry"},
     {"title": "Command.Validator", "text": "   ", "tags": "", "url": "Command.Validator.html"},
     {"title": "Command.Validator.TValidatorContext", "text": "   ", "tags": "", "url": "Command.Validator.TValidatorContext.html"},
     {"title": "Command.Validator.TValidatorContext.Create", "text": "    ", "tags": "", "url": "Command.Validator.TValidatorContext.html#Create"},
     {"title": "Command.Validator.TValidatorContext.Add", "text": "   AValidator A valid instance of IValidatorBase responsible for processing a specific type of validation. AValidator A valid instance of IValidatorBase responsible for processing a specific type of validation. ", "tags": "", "url": "Command.Validator.TValidatorContext.html#Add"},
     {"title": "Command.Validator.TValidatorContext.HandleValidation", "text": "   ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ", "tags": "", "url": "Command.Validator.TValidatorContext.html#HandleValidation"},
     {"title": "Command.Validator.TValidatorContext.Validate", "text": "   ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ", "tags": "", "url": "Command.Validator.TValidatorContext.html#Validate"},
     {"title": "Command.Validator.TValidatorBase", "text": "   ", "tags": "", "url": "Command.Validator.TValidatorBase.html"},
     {"title": "Command.Validator.TValidatorBase.Create", "text": "    ", "tags": "", "url": "Command.Validator.TValidatorBase.html#Create"},
     {"title": "Command.Validator.TValidatorBase.Validate", "text": "   ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ACommand CommandBuilder instance containing the arguments, commands and options configured to be validated against the arguments passed to it. ", "tags": "", "url": "Command.Validator.TValidatorBase.html#Validate"},
     {"title": "Command.Validator.TValidatorBase.Sucessor", "text": "   ", "tags": "", "url": "Command.Validator.TValidatorBase.html#Sucessor"},
     {"title": "Command.Validator.TDuplicateArgumentValidator", "text": "   ", "tags": "", "url": "Command.Validator.TDuplicateArgumentValidator.html"},
     {"title": "Command.Validator.TDuplicateArgumentValidator.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TDuplicateArgumentValidator.html#Validate"},
     {"title": "Command.Validator.TDuplicateOptionValidator", "text": "   ", "tags": "", "url": "Command.Validator.TDuplicateOptionValidator.html"},
     {"title": "Command.Validator.TDuplicateOptionValidator.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TDuplicateOptionValidator.html#Validate"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotValid", "text": "   ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotValid.html"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotValid.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotValid.html#Validate"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotRequired", "text": "   ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotRequired.html"},
     {"title": "Command.Validator.TProvidedArgumentsAreNotRequired.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TProvidedArgumentsAreNotRequired.html#Validate"},
     {"title": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit", "text": "   ", "tags": "", "url": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit.html"},
     {"title": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TProvidedArgumentsExceedsAcceptedLimit.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument.html"},
     {"title": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandDoesNotAcceptCommandAsArgument.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresValidCommandOrNothing.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneArguments", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneArguments.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneArguments.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneArguments.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresNoArguments", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresNoArguments.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresNoArguments.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresNoArguments.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneOption", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneOption.html"},
     {"title": "Command.Validator.TSelectedCommandRequiresOneOption.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandRequiresOneOption.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandValidateIfOptionsExists", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateIfOptionsExists.html"},
     {"title": "Command.Validator.TSelectedCommandValidateIfOptionsExists.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateIfOptionsExists.html#Validate"},
     {"title": "Command.Validator.TSelectedCommandValidateRejectedOption", "text": "   ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateRejectedOption.html"},
     {"title": "Command.Validator.TSelectedCommandValidateRejectedOption.Validate", "text": "    ", "tags": "", "url": "Command.Validator.TSelectedCommandValidateRejectedOption.html#Validate"},
     {"title": "Command.Version", "text": "   ", "tags": "", "url": "Command.Version.html"},
     {"title": "Command.Version.VersionCommand", "text": "    NoteRequires version information to be defined in the Lazarus project .lpi file. Also the main program must include the {$R *.res} directive. If a different color theme is specified for the TCommandBuilder.ColorTheme, the output will be properly done.    To use this command add the Command.Version unit to the uses clause and run the following command:       Command.Version.Registry(MyApp.CommandBuilder);       ABuilder CommandBuilder that will be used to output the version information. ABuilder CommandBuilder that will be used to output the version information. ", "tags": "", "url": "Command.Version.html#VersionCommand"},
     {"title": "Command.Version.Registry", "text": "   ABuilder CommandBuilder instance that will be used to register the VersionCommand. ABuilder CommandBuilder instance that will be used to register the VersionCommand. ", "tags": "", "url": "Command.Version.html#Registry"}
]};
